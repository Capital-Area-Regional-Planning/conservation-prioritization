parcel_geo <- filter(parcels_2023_short, address == input)
parcel_geo
cur_original_forest <- select(forest_data, `2022`) %>%
filter(`2022` == "Original Forest") %>%
st_combine()
intersect_original <- st_area(st_intersection(parcel_geo, cur_original_forest))
intersect_original
intersect_original <- st_intersection(parcel_geo, cur_original_forest)
intersect_original
st_is_empty(intersect_original)
# Document and reload your package
golem::document_and_reload()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
install.packages("shinythemes")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.packages('attachment') # if needed.
attachment::att_amend_desc()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
change_summary_gg
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
forest_data
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .
))
library(tidyr)
library(dplyr)
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .
))
library(sf)
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .
))
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
# value == "New Forest" ~ "Early Successional Forest",
# value == "Deforested" ~ "Old Growth Forest Lost",
# value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .
))
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
.x == "Original Forest" ~ "Old Growth Forest",
# value == "New Forest" ~ "Early Successional Forest",
# value == "Deforested" ~ "Old Growth Forest Lost",
# value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .
))
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
# value == "New Forest" ~ "Early Successional Forest",
# value == "Deforested" ~ "Old Growth Forest Lost",
# value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ "a"
))
change_summary_gg
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
# value == "New Forest" ~ "Early Successional Forest",
# value == "Deforested" ~ "Old Growth Forest Lost",
# value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ .data
))
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
# value == "New Forest" ~ "Early Successional Forest",
# value == "Deforested" ~ "Old Growth Forest Lost",
# value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ value
))
change_summary_gg
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ value
))
change_summary_gg
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ value
)) %>%
group_by(name, value) %>%
summarise(total = sum(Acres))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
change_summary_gg
View(change_summary_gg)
View(change_summary_gg)
a <- filter(change_summary_gg, value="Early Successional Forest")
a <- filter(change_summary_gg, value=="Early Successional Forest")
View(a)
View(a)
1113-534
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
?lag
lag(a$total)
lag(a$total, 1)
lag(a$total, 2)
mutate(lag = lag(total))
mutate(a, lag = lag(total))
mutate(a, lag = lag(a$total))
mutate(a, lag = lag(total, order_by=name))
mutate(a, lag = lag(total, order_by=value))
mutate(a, lag = lag(total, order_by=total))
mutate(a, lag = lag(total, n=1, order_by=total))
mutate(a, prev = dplyr::lag(total, n=1, order_by=total))
a <- ungroup(a)
mutate(a, prev = dplyr::lag(total, n=1))
mutate(ungroup(change_summary_gg), prev = dplyr::lag(total, n=1, order_by="value"))
mutate(ungroup(change_summary_gg), prev = dplyr::lag(total, n=1))
mutate(ungroup(change_summary_gg), prev = dplyr::lag(total, order_by=name))
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total))
change_tst
5205-NA
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(change = total-prev)
change_tst
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(0) %>%
mutate(change = total-prev)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(prev, 0) %>%
mutate(change = total-prev)
?replace_na
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(0) %>%
mutate(change = total-prev)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na() %>%
mutate(change = total-prev)
change_tst
replace_na(change_tst$prev, 0)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(prev, 0) %>%
mutate(change = total-prev)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(change_tst$prev, 0) %>%
mutate(change = total-prev)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
replace_na(change_tst, 0) %>%
mutate(change = total-prev)
change_tst <- replace_na(change_tst$prev, 0)
change_tst <- ungroup(change_summary_gg) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev)
change_tst
change_early_successional <- ungroup(change_summary_gg) %>%
filter(value == "Early Successional") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev)
change_early_successional
change_early_successional <- ungroup(change_summary_gg) %>%
filter(value == "Early Successional Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev)
change_early_successional
forest_data <- read_sf(paste0(here::here(), "/data-raw/mapping_data/mendota_yahara_forest.shp")) %>%
st_transform(4326)
library(here)
library(sf)
library(tidyr)
library(ggplot2)
library(dplyr)
forest_data <- read_sf(paste0(here::here(), "/data-raw/mapping_data/mendota_yahara_forest.shp")) %>%
st_transform(4326)
change_summary_gg <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ value
)) %>%
group_by(name, value) %>%
summarise(total = sum(Acres))
change_summary_gg
write.csv(cumulative_summary, paste0(here::here(), "/data-raw/cumulative_summary.csv"))
cumulative_summary <- pivot_longer(st_drop_geometry(forest_data), 4:11) %>%
mutate(value = case_when(
value == "Original Forest" ~ "Old Growth Forest",
value == "New Forest" ~ "Early Successional Forest",
value == "Deforested" ~ "Old Growth Forest Lost",
value == "New Forest Lost" ~ "Early Successional Forest Lost",
TRUE ~ value
)) %>%
group_by(name, value) %>%
summarise(total = sum(Acres))
write.csv(cumulative_summary, paste0(here::here(), "/data-raw/cumulative_summary.csv"))
?write.csv
write.csv(cumulative_summary, paste0(here::here(), "/data-raw/cumulative_summary.csv"), row.names=FALSE)
#save data for change graph
change_old_growth <- ungroup(cumulative_summary) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev)
change_early_successional <- ungroup(cumulative_summary) %>%
filter(value == "Early Successional Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev)
change_old_growth
change_early_successional
a <- bind_rows(change_early_successional, change_old_growth)
a
write.csv(bind_rows(change_old_growth, change_early_successional), paste0(here::here(), "/data-raw/change_summary.csv"), row.names=FALSE)
write.csv(bind_rows(change_old_growth, change_early_successional) %>% select(-prev, -total), paste0(here::here(), "/data-raw/change_summary.csv"), row.names=FALSE)
#save data for change graph
change_old_growth <- ungroup(cumulative_summary) %>%
filter(value == "Old Growth Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev) %>%
filter(name != "1937") %>%
select(-prev, -total)
change_early_successional <- ungroup(cumulative_summary) %>%
filter(value == "Early Successional Forest") %>%
mutate(prev = dplyr::lag(total)) %>%
mutate(prev = replace_na(prev, 0)) %>%
mutate(change = total-prev) %>%
select(-prev, -total)
write.csv(bind_rows(change_old_growth, change_early_successional), paste0(here::here(), "/data-raw/change_summary.csv"), row.names=FALSE)
change_summary <- read.csv(paste0(here::here(), "/data-raw/change_summary.csv"))
change_summary
change_summary
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Old Growth Forest", "Early Successional Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#3fab63", "#4e79cf")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank())
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Old Growth Forest", "Early Successional Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank())
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank())
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ggplot(filter(cumulative_summary, value != "Not Forest"), aes(x=name, y=total, color=factor(value, levels = c("Old Growth Forest", "Early Successional Forest", "Old Growth Forest Lost", "Early Successional Forest Lost")))) +
geom_point(size=4) +
scale_color_manual(values = c("#3fab63", "#4e79cf", "#cf4e4e", "#f5ac53")) +
#highlight the year closest to the slider input
gghighlight(name == !!name, label_key = value, keep_scales = TRUE, use_direct_label = FALSE,
unhighlighted_params = list(colour = NULL, alpha = 0.3)) +
labs(title="Acreage Total by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
change_summary
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
View(change_summary)
View(change_summary)
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
scale_x_continuous(breaks=c(1937, 1955, 1968, 1976, 1987, 2000, 2010), labels=c("1937", "1955", "1968", "1976", "1987", "2000", "2010", "2022")) +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
scale_x_continuous(breaks=c(1937, 1955, 1968, 1976, 1987, 2000, 2010, 2022), labels=c("1937", "1955", "1968", "1976", "1987", "2000", "2010", "2022")) +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Sass code compilation
sass::sass(input = sass::sass_file("inst/app/www/custom.sass"), output = "inst/app/www/custom.css", cache = NULL)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
bind_rows(change_old_growth, c("1937", NA))
library(here)
library(sf)
library(tidyr)
library(ggplot2)
library(dplyr)
bind_rows(change_old_growth, c("1937", NA))
bind_rows(change_old_growth, ["1937", NA])
bind_rows(change_old_growth, {"1937", NA})
a <- c("1937, NA")
bind_rows(change_old_growth, a)
cumulative_summary[1,]
cumulative_summary[nrow(cumulative_summary),]
cumulative_summary[nrow(cumulative_summary)+1,]
change_old_growth[nrow(cumulative_summary)+1,] <- c("1937", NA)
change_old_growth[nrow(cumulative_summary)+1, 1] <- "1937"
change_old_growth[nrow(cumulative_summary)+1]
change_old_growth[nrow(change_old_growth)+1,] <- c("1937", NA)
change_old_growth
change_old_growth[nrow(change_old_growth)+1,] <- c("1937", "Old Growth Forest", "NA")
change_old_growth[nrow(change_old_growth)+1,] <- c("1937", "Old Growth Forest", NA)
change_old_growth[nrow(change_old_growth)+1,] <- as.list("1937", "Old Growth Forest", NA)
change_old_growth[nrow(change_old_growth)+1,] <- as.list("1937", "Old Growth Forest", 5)
as.data.frame(c("1937", "Old Growth Forest", NA)
)
as.data.frame("1937", "Old Growth Forest", NA)
change_summary <- read.csv(paste0(here::here(), "/data-raw/change_summary.csv"))
change_summary
ggplot(change_summary, aes(x=name, y=change, color=factor(value, levels = c("Early Successional Forest", "Old Growth Forest")))) +
geom_point(size=4) +
scale_color_manual(values = c("#4e79cf", "#3fab63")) +
labs(title="Acreage Change by Decade",
x ="Year", y = "Acres") +
scale_x_continuous(breaks=c(1937, 1955, 1968, 1976, 1987, 2000, 2010, 2022), labels=c("1937", "1955", "1968", "1976", "1987", "2000", "2010", "2022")) +
theme_minimal() +
theme(text = element_text(size=20), legend.title= element_blank()) +
geom_hline(yintercept=0, linetype="dashed", color = "red")
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "Conservation.Prioritization", # The Name of the package containing the App
pkg_title = "Conservation Prioritization Tool", # The Title of the package containing the App
pkg_description = "A pilot tool to visualize and report on historical/ongoing canopy change in Dane County, WI.", # The Description of the package containing the App
author_first_name = "Liz", # Your First Name
author_last_name = "Levy", # Your Last Name
author_email = "it@capitalarearpc.org", # Your Email
repo_url = NULL, # The URL of the GitHub Repo (optional),
pkg_version = "0.0.0.9000" # The Version of the package containing the App
)
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
